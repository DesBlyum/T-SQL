-- создание процедуры по получению данных для расчета необходимых доп. продаж на филиалах компании
-- в процедуру вшит конкретный ИД родительской папки в которой хранятся необходимые для анализа товары
-- выборка производится на основании документов продаж "Розничные чеки"
-- для анализа берутся продажи двух предыдущих месяцев и сравниваются с текущим

ALTER procedure [dbo].[ПолучитьДанные_ВыполнениеЦелейДопродаж]
	@РасчетныйПериод as datetime 
as
BEGIN
	DECLARE 
		@НачалоПервогоПериода datetime = dbo.ПолучитьПервыйДеньМесяца(dateadd(mm, -2, @РасчетныйПериод)),
		@КонецПервогоПериода datetime = dbo.ПолучитьПоследнийДеньМесяца(dateadd(mm, -2, @РасчетныйПериод)),
		@НачалоВторогоПериода datetime = dbo.ПолучитьПервыйДеньМесяца(dateadd(mm, -1, @РасчетныйПериод)),
		@КонецВторогоПериода datetime = dbo.ПолучитьПоследнийДеньМесяца(dateadd(mm, -1, @РасчетныйПериод)),
		@НачалоТекущегоПериода datetime = dbo.ПолучитьПервыйДеньМесяца(@РасчетныйПериод),
		@КонецТекущегоПериода datetime = @РасчетныйПериод
	DECLARE
		@ИдентифкаторПервогоПериода varchar(7) = cast(datepart(yy, @НачалоПервогоПериода) as varchar) + '_' + cast(datepart(mm, @НачалоПервогоПериода) as varchar),
		@ИдентифкаторВторогоПериода varchar(7) = cast(datepart(yy, @НачалоВторогоПериода) as varchar) + '_' + cast(datepart(mm, @НачалоВторогоПериода) as varchar),
		@ИдентифкаторТекущегоПериода varchar(7) = cast(datepart(yy, @НачалоТекущегоПериода) as varchar) + '_' + cast(datepart(mm, @НачалоТекущегоПериода) as varchar)
	;
	
	-- получение всех дочерних элементов справочника номенклатуры по конкретному ИД родительской папки
	WITH СписокНоменклатуры as (
		SELECT Code FROM dbo.ChildrenReturnU('DX7Y2W   ','DimNomenklatura')
	), 

	-- выборка табличной части документов Чеки за 3 месяца
	ПродажиПоЧекам as (
		SELECT
			[DATE],
			SKLAD_CODE,
			NDOC,
			SUM(QTY) KOL,
			SUM([SUM]) [SUM],
			COUNT(*) POZ
		FROM CASH_CHECK_DT (nolock)
		WHERE [DATE] between @НачалоПервогоПериода and @КонецТекущегоПериода and PROD_CODE in (SELECT code FROM СписокНоменклатуры)
		GROUP BY 
			[DATE],
			SKLAD_CODE,
			NDOC
	),

	-- выборка шапочной части документов Чеки за 3 месяца
	ДанныеЧекаШ as (
		SELECT 
			convert(varchar,ЧекиШ.DATEDOC,112)+'_'+cast(ЧекиШ.Sklad_CODE as varchar)+'_'+cast(ЧекиШ.NDOC as varchar) as Ид,
			ЧекиШ.DATEDOC as Дата,
			ЧекиШ.Sklad_CODE as СкладКод,
			Cast(ЧекиШ.KOL - ISNULL(ПродажиПоЧекамПакеты.KOL,0) as money) as КоличествоТоваровЧека,
			ЧекиШ.POZ - ISNULL(ПродажиПоЧекамПакеты.POZ,0) as КоличествоПозицийЧека,
			cast(isnull(ЧекиШ.[SUM],0) as money) as СуммаЧека,
			ЧекиШ.NDOC as НомерЧека
		FROM CASH_CHECK_DH ЧекиШ (nolock)
		LEFT JOIN
			ПродажиПоЧекам ON ПродажиПоЧекам.DATE = ЧекиШ.DATEDOC and ПродажиПоЧекам.SKLAD_CODE = ЧекиШ.Sklad_CODE and ПродажиПоЧекам.NDOC = ЧекиШ.NDOC 
		WHERE DATEDOC between @НачалоПервогоПериода and @КонецТекущегоПериода
	),

	-- переформировываем данные, для анализа важно наличие доп. товара в чеки покупателя, а не его конкретное кол-во
	ДанныеДляРасчета as (
		SELECT 
			cast(datepart(yy, Дата) as varchar) + '_' + cast(datepart(mm, Дата) as varchar) as ИдентификаторПериода,
			СкладКод,
			CASE
				WHEN КоличествоПозицийЧека = 1 THEN  1
				ELSE 0
			END as Чеки1,
			CASE
				WHEN КоличествоПозицийЧека = 1 THEN  СуммаЧека
				ELSE 0
			END as СуммаЧеки1,
			CASE
				WHEN КоличествоПозицийЧека = 2 THEN  1
				ELSE 0
			END as Чеки2,
			CASE
				WHEN КоличествоПозицийЧека = 2 THEN  СуммаЧека
				ELSE 0
			END as СуммаЧеки2,
			CASE
				WHEN КоличествоПозицийЧека >= 3 THEN  1
				ELSE 0
			END as Чеки3,
			CASE
				WHEN КоличествоПозицийЧека >= 3 THEN  СуммаЧека
				ELSE 0
			END as СуммаЧеки3,		
			1 as ЧекиВсего,
			СуммаЧека as СуммаЧекиВсего
		FROM
			ДанныеЧекаШ
	),
	
	-- подсчитываем кол-во  доп. товаров в чеках с кол-вом 1,2,3 и более
	ДанныеДляРасчетаСвернуто as (
		SELECT
			ИдентификаторПериода,
			СкладКод,
			sum(Чеки1) Чеки1,
			sum(СуммаЧеки1) СуммаЧеки1,
			sum(Чеки2) Чеки2,
			sum(СуммаЧеки2) СуммаЧеки2,
			sum(Чеки3) Чеки3,
			sum(СуммаЧеки3) СуммаЧеки3,
			sum(ЧекиВсего) as ЧекиВсего,
			sum(СуммаЧекиВсего) as СуммаЧекиВсего
		FROM 
			ДанныеДляРасчета
		GROUP BY
			ИдентификаторПериода,
			СкладКод
	)

	-- для анализа выводим все 3 периода и данные продаж в них
	SELECT
		Справочник_Склады.Код as СкладКод,
		Справочник_Склады.Наименование as СкладНаименование,
		Справочник_Склады.ДоменноеИмя,
		ДС1.Чеки1 as Период1_Чеки1,
		ДС2.Чеки1 as Период2_Чеки1,
		ДС3.Чеки1 as Период3_Чеки1,
		ДС1.СуммаЧеки1 / (CASE WHEN ISNULL(ДС1.Чеки1,0) = 0 THEN 1 ELSE ДС1.Чеки1 END) as Период1_СреднийЧек1,
		ДС2.СуммаЧеки1 / (CASE WHEN ISNULL(ДС2.Чеки1,0) = 0 THEN 1 ELSE ДС2.Чеки1 END) as Период2_СреднийЧек1,
		ДС3.СуммаЧеки1 / (CASE WHEN ISNULL(ДС3.Чеки1,0) = 0 THEN 1 ELSE ДС3.Чеки1 END) as Период3_СреднийЧек1,
		ДС1.СуммаЧекиВсего / ДС1.ЧекиВсего as Период1_СреднийЧек,
		ДС2.СуммаЧекиВсего / ДС2.ЧекиВсего as Период2_СреднийЧек,
		ДС3.СуммаЧекиВсего / ДС3.ЧекиВсего as Период3_СреднийЧек,
		ДС1.СуммаЧеки1 as Период1_СуммаЧеки1,
		ДС2.СуммаЧеки1 as Период2_СуммаЧеки1,
		ДС3.СуммаЧеки1 as Период3_СуммаЧеки1,
		ДС1.ЧекиВсего as ЧекиВсего1,
		ДС2.ЧекиВсего as ЧекиВсего2,
		ДС3.ЧекиВсего as ЧекиВсего3,
		ДС3.СуммаЧекиВсего as СуммаЧекиВсего3,
		100 * ДС3.Чеки1 / (CASE WHEN ISNULL(ДС3.ЧекиВсего,0) = 0 THEN 1 ELSE ДС3.ЧекиВсего END) as Период3_ПроцентОтОбщего1,
		20 as Цель_ПроцентОтОбщего1,
		((ДС1.СуммаЧекиВсего / ДС1.ЧекиВсего)+(ДС2.СуммаЧекиВсего / ДС2.ЧекиВсего))/2  as Цель_СреднийЧек1
	FROM 
		ДанныеДляРасчетаСвернуто ДС1
	FULL JOIN ДанныеДляРасчетаСвернуто ДС2
		ON ДС1.СкладКод = ДС2.СкладКод	and ДС2.ИдентификаторПериода = @ИдентифкаторВторогоПериода
	FULL JOIN ДанныеДляРасчетаСвернуто ДС3
		ON ДС1.СкладКод = ДС3.СкладКод	and ДС3.ИдентификаторПериода = @ИдентифкаторТекущегоПериода
	LEFT JOIN Справочник_Склады 
		ON Справочник_Склады.Код = isnull(ДС1.СкладКод, ДС2.СкладКод)
	WHERE
		ДС1.ИдентификаторПериода = @ИдентифкаторПервогоПериода
		and Справочник_Склады.Действующий = 'Да'
		and Справочник_Склады.ТипСклада = 'Розница'
	ORDER BY
		isnull(ДС1.СкладКод, ДС2.СкладКод)
END

